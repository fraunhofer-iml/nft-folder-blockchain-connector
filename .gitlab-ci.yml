# Copyright Open Logistics Foundation
#
# Licensed under the Open Logistics Foundation License 1.3.
# For details on the licensing terms, see the LICENSE file.
# SPDX-License-Identifier: OLFL-1.3

stages:
  - build
  - test
  - analyze
  - license
  - archive
  - deploy

variables:
  GITLAB_TAG: 'be'
  GIT_DEPTH: 0
  HUSKY: 0
  NPM_CI: npm ci --include dev --cache .npm --prefer-offline
  DOCKER_REGISTRY_URI: '$BE_NEXUS_DOCKER_REGISTRY:$BE_NEXUS_DOCKER_REGISTRY_DEPLOY_PORT'
  BLOCKCHAIN_CONNECTOR_IMAGE: '${DOCKER_REGISTRY_URI}/nft-folder/blockchain-connector'
  OPENSHIFT_IMAGE: 'nexus.apps.sele.iml.fraunhofer.de:443/sele/cicdtools/openshift-cli-helm:latest'

default:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm
  image: node:20-alpine3.19
  timeout: 20 minutes

#############
### build ###
#############

install-dependencies:
  stage: build
  script:
    - $NPM_CI
  rules:
    - when: always

############
### test ###
############

# Uncomment this job when adding or enabling new tests.
.run-unit-tests:
  stage: test
  before_script:
    - $NPM_CI
  script:
    - npm run test:cov
  artifacts:
    paths:
      - coverage/
    expire_in: 1 hour
  rules:
    - when: on_success

###############
### analyze ###
###############

run-eslint:
  stage: analyze
  before_script:
    - $NPM_CI
  script:
    - npm run eslint:check
  rules:
    - when: on_success

run-prettier:
  stage: analyze
  before_script:
    - $NPM_CI
  script:
    - npm run prettier:check
  rules:
    - when: on_success

run-sonar-scanner:
  stage: analyze
  image: sonarsource/sonar-scanner-cli
  script:
    - >
      sonar-scanner
      -Dproject.settings=sonar.properties
      -Dsonar.host.url="${SONAR_HOST_URL}"
      -Dsonar.login="${SONAR_TOKEN}"
  rules:
    - when: on_success
  allow_failure: true

###############
### license ###
###############

create-npm-licenses-list:
  stage: license
  variables:
    LICENSES_LIST: 'npm-licenses-list.csv'
    LICENSES_OVERRIDES: 'third-party-licenses/npm-licenses-overrides.txt'
    EXCLUDED_PACKAGES: ''
  before_script:
    - $NPM_CI
    - >
      if [ -e ${LICENSES_OVERRIDES} ]; then
        EXCLUDED_PACKAGES=$(cat ${LICENSES_OVERRIDES});
      fi
  script:
    - >
      npx license-checker
      --unknown
      --csv
      --excludePackages "${EXCLUDED_PACKAGES}"
      --onlyAllow "${NPM_LICENSE_CHECKER_WHITELIST}"
      --out "${LICENSES_LIST}"
    - >
      if [ ${EXCLUDED_PACKAGES} ]; then
        echo -e "\n\nManually overridden packages excluded from the licenses check:\n${EXCLUDED_PACKAGES}" >> ${LICENSES_LIST};
      fi
    - cat "${LICENSES_LIST}"
  artifacts:
    name: 'npm-licenses-list'
    expose_as: 'NPM Licenses List'
    expire_in: 1 hour
    paths:
      - $LICENSES_LIST
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

###############
### archive ###
###############

build-docker-image:
  stage: archive
  image: nexus.blockchain-europe.iml.fraunhofer.de:5003/gitlab-runner/node_docker:latest
  services:
    - docker:dind
  before_script:
    - $NPM_CI
    - npm run build
    - docker login -u "$BE_NEXUS_USER" -p "$BE_NEXUS_PASS" "$DOCKER_REGISTRY_URI"
  script:
    - docker build --no-cache -t "${BLOCKCHAIN_CONNECTOR_IMAGE}:latest" .
    - docker push "${BLOCKCHAIN_CONNECTOR_IMAGE}:latest"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

##############
### deploy ###
##############

deploy-ecmr-to-okd:
  stage: deploy
  image: $OPENSHIFT_IMAGE
  script:
    - oc login --server="$BE_OPENSHIFT_SERVER" --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify
    - sh ./helm/okd_deploy.sh -r ecmr
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d-ecmr+$/'

deploy-sfbdc-to-okd:
  stage: deploy
  image: $OPENSHIFT_IMAGE
  script:
    - oc login --server="$BE_OPENSHIFT_SERVER" --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify
    - sh ./helm/okd_deploy.sh -r sfbdc
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d-sfbdc+$/'
